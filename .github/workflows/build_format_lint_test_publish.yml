name: Build, Format, Lint, Test and Publish
on:
  push:
  pull_request:
    branches:
      # Branches from forks have the form 'user:branch-name' so we only run
      # this job on pull_request events for branches that look like fork
      # branches. Without this we would end up running this job twice for non
      # forked PRs, once for the push and then once for opening the PR.
    - 'main'
  workflow_dispatch:

jobs:
  # Build the package
  # echo "::set-output name=version::$(cat .python-version)" >> $GITHUB_ENV
  build:
    name: Build py-fatigue
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get python version from .python-version
      id: python-version
      run: |
        echo "version=$(cat .python-version)" >> $GITHUB_ENV

    - name: Install python ${{ steps.python-version.outputs.version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ steps.python-version.outputs.version }}

    - name: Install poetry
      uses: Gr1N/setup-poetry@v7

    - name: Build package
      run: poetry build

    - name: Upload built package
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/
        retention-days: 1

  # Run black
  black:
    name: Black formatter
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get python version from .python-version
      id: python-version
      run: |
        echo "version=$(cat .python-version)" >> $GITHUB_ENV

    - name: Install python ${{ steps.python-version.outputs.version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ steps.python-version.outputs.version }}

    - name: Install Dependencies
      run: |
        pip install black
    - name: Run black
      run: |
        black py_fatigue/ --check

  # Run flake8
  flake8_py3:
    name: Flake8 Linter
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get python version from .python-version
      id: python-version
      run: |
        echo "version=$(cat .python-version)" >> $GITHUB_ENV

    - name: Install python ${{ steps.python-version.outputs.version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ steps.python-version.outputs.version }}

    - name: Install Dependencies
      run: |
        pip install flake8
    - name: Run flake8
      run: |
        flake8 py_fatigue/ --count --select=E9,F63,F7,F82 --show-source --statistics

  # Run mypy
  mypy:
    name: Mypy Type Checker
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get python version from .python-version
      id: python-version
      run: |
        echo "version=$(cat .python-version)" >> $GITHUB_ENV

    - name: Install python ${{ steps.python-version.outputs.version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ steps.python-version.outputs.version }}

    - name: Install Dependencies
      run: |
        pip install mypy

    - name: Run mypy
      run: |
        mypy --config-file=./mypy.ini py_fatigue/

  # Run pytest using built package
  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python: ["3.8", "3.9", "3.10"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
        cache: 'pip'
        cache-dependency-path: "poetry.lock"

    - name: Download built package
      uses: actions/download-artifact@v3
      with:
        name: dist
    
    - name: Install py_fatigue and pytest
      shell: bash
      run: |
        WHL_NAME=$(ls py_fatigue-*.whl)
        pip install ${WHL_NAME} pytest hypothesis
    - name: Run tests
      shell: bash
      run: pytest

  # Publish to pypi on version change
  # This is based on https://github.com/coveooss/pypi-publish-with-poetry
  # echo "::set-output name=version::${BASH_REMATCH[2]}"
  publish:
    name: Publish py-fatigue to pypi
    needs: [build, test, black, flake8_py3, mypy]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release') 
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get python version from .python-version
      id: python-version
      run: |
        echo "version=$(cat .python-version)" >> $GITHUB_ENV

    - name: Install python ${{ steps.python-version.outputs.version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ steps.python-version.outputs.version }}

    - name: Download built package
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Install poetry
      uses: Gr1N/setup-poetry@v7

    - name: Install coveo-pypi-cli
      run: pip install coveo-pypi-cli

    - name: Determine the version for this release from the build
      id: current
      run: |
        BUILD_VER="$(ls dist/py_fatigue-*.tar.gz)"
        echo "Path: $BUILD_VER"
        if [[ $BUILD_VER =~ (py_fatigue-)([^,][0-9.]{4}) ]]; then
            echo "version=${BASH_REMATCH[2]}" >> $GITHUB_ENV
            echo "Version of build: ${BASH_REMATCH[2]}"
        else
            echo "No version found found"
        fi
        
    - name: Get latest published version
      id: published
      run: |
        PUB_VER="$(pypi current-version py_fatigue)"
        echo "version=$PUB_VER" >> $GITHUB_ENV
        echo "Latest published version: $PUB_VER"
    

    - name: Publish to pypi if new version
      if: (steps.current.outputs.version != steps.published.outputs.version)
      shell: bash
      run: |
        poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
        if [[ '${{ github.ref_name }}' == 'main' ]]; then
          poetry publish 
        else
          echo "Dry run of publishing the package"
          poetry publish --dry-run
        fi
    - name: Tag repository
      shell: bash
      id: get-next-tag
      if: (steps.current.outputs.version != steps.published.outputs.version)
      run: |
        TAG_NAME=${{ steps.current.outputs.version }}
        echo "{tag-name}={$TAG_NAME}" >> $GITHUB_OUTPUT
        echo "This release will be tagged as $TAG_NAME"
        git config user.name "github-actions"
        git config user.email "actions@users.noreply.github.com"
        git tag --annotate --message="Automated tagging system" $TAG_NAME ${{ github.sha }}
    - name: Push the tag
      if: (steps.current.outputs.version != steps.published.outputs.version)
      env:
        TAG_NAME: ${{ steps.current.outputs.version }}
      run: |
        if [[ ${{ github.ref_name }} == 'main' ]]; then
          git push origin $TAG_NAME
        else
          echo "If this was the main branch, I would push a new tag named $TAG_NAME"
        fi
